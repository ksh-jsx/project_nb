# Generated by Django 2.0.13 on 2019-11-27 04:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='이름')),
                ('phone1', models.CharField(max_length=140, null=True, verbose_name='휴대전화1')),
                ('phone2', models.CharField(max_length=140, null=True, verbose_name='휴대전화2')),
                ('phone3', models.CharField(max_length=140, null=True, verbose_name='휴대전화3')),
                ('gender', models.CharField(max_length=80, verbose_name='성별')),
                ('ciga', models.CharField(max_length=80, verbose_name='흡연 여부')),
                ('mail_agree', models.BooleanField(default=False, verbose_name='메일 수신')),
                ('sms_agree', models.BooleanField(default=False, verbose_name='SMS')),
                ('meet_path', models.CharField(choices=[('SNS', 'SNS'), ('Inschool_Promotion', '교내홍보물'), ('Naver_PR', '네이버 광고'), ('KaKao_OpenChat', '오픈카톡방'), ('School_Community', '학교 커뮤니티'), ('etc', '기타')], max_length=50, verbose_name='나누방을 접한 경로')),
                ('active', models.BooleanField(default=False)),
                ('auto_increment_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment', models.BooleanField(default=False)),
                ('user_type', models.CharField(blank=True, max_length=80, null=True, verbose_name='이용자 타입')),
                ('connector', models.CharField(blank=True, max_length=140, null=True, verbose_name='관계인')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room_infos',
            fields=[
                ('auto_increment_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('address', models.CharField(max_length=255, verbose_name='주소')),
                ('address_detail', models.CharField(max_length=255, verbose_name='상세주소')),
                ('univ', models.CharField(choices=[('건국대학교 서울캠퍼스', '건국대학교 서울캠퍼스'), ('경희대학교 서울캠퍼스', '경희대학교 서울캠퍼스'), ('고려대학교 서울캠퍼스', '고려대학교 서울캠퍼스'), ('광운대학교', '광운대학교'), ('국민대학교', '국민대학교'), ('덕성여자대학교 쌍문캠퍼스', '덕성여자대학교 쌍문캠퍼스'), ('덕성여자대학교 종로캠퍼스', '덕성여자대학교 종로캠퍼스'), ('동국대학교 서울캠퍼스', '동국대학교 서울캠퍼스'), ('동덕여자대학교', '동덕여자대학교'), ('삼육대학교', '삼육대학교'), ('상명대학교 서울캠퍼스', '상명대학교 서울캠퍼스'), ('서강대학교', '서강대학교'), ('서경대학교', '서경대학교'), ('서울과학기술대학교', '서울과학기술대학교'), ('서울대학교 관악캠퍼스', '서울대학교 관악캠퍼스'), ('서울대학교 연건캠퍼스', '서울대학교 연건캠퍼스'), ('서울시립대학교', '서울시립대학교'), ('서울여자대학교', '서울여자대학교'), ('성공회대학교', '성공회대학교'), ('성균관대학교 인문사회캠퍼스', '성균관대학교 인문사회캠퍼스'), ('성신여자대학교 수정캠퍼스', '성신여자대학교 수정캠퍼스'), ('성신여자대학교 운정그린캠퍼스', '성신여자대학교 운정그린캠퍼스'), ('세종대학교', '세종대학교'), ('숙명여자대학교', '숙명여자대학교'), ('숭실대학교', '숭실대학교'), ('연세대학교 신촌캠퍼스', '연세대학교 신촌캠퍼스'), ('이화여자대학교', '이화여자대학교'), ('중앙대학교 서울캠퍼스', '중앙대학교 서울캠퍼스'), ('한국외국어대학교 서울캠퍼스', '한국외국어대학교 서울캠퍼스'), ('한국체육대학교', '한국체육대학교'), ('한국성서대학교', '한국성서대학교'), ('한성대학교', '한성대학교'), ('한양대학교 서울캠퍼스', '한양대학교 서울캠퍼스'), ('홍익대학교 서울캠퍼스', '홍익대학교 서울캠퍼스')], max_length=15, verbose_name='대학')),
                ('tag', models.CharField(max_length=10, verbose_name='태그')),
                ('room_type', models.CharField(max_length=6, verbose_name='방종류')),
                ('deposit', models.IntegerField(verbose_name='내고 있는 보증금')),
                ('monthly_cost', models.IntegerField(verbose_name='내고 있는 월세')),
                ('deposit_necessity', models.CharField(max_length=6, verbose_name='보증금 여부')),
                ('desired_deposit', models.IntegerField(verbose_name='받을 보증금')),
                ('desired_monthly', models.IntegerField(verbose_name='받을 월세')),
                ('management_cost_include', models.CharField(max_length=6, verbose_name='관리비 포함 여부')),
                ('management_cost', models.IntegerField(verbose_name='관리비')),
                ('start_date', models.DateField(max_length=15, verbose_name='입실희망날짜')),
                ('end_date', models.DateField(max_length=15, verbose_name='퇴실희망날짜')),
                ('floor', models.CharField(choices=[('7층↑', '7층↑'), ('7층', '7층'), ('6층', '6층'), ('5층', '5층'), ('4층', '4층'), ('3층', '3층'), ('2층', '2층'), ('1층', '1층'), ('반지하', '반지하'), ('지하 1층', '지하 1층'), ('지하 2층', '지하 2층'), ('지하 2층↓', '지하 2층↓')], max_length=15, verbose_name='층수')),
                ('sublessee_type1', models.CharField(max_length=5, verbose_name='흡연여부')),
                ('sublessee_type2', models.CharField(max_length=5, verbose_name='성별')),
                ('room_options', models.CharField(blank=True, max_length=500, null=True, verbose_name='옵션')),
                ('sublessor_type1', models.CharField(max_length=10, verbose_name='판매자 정보 표시 유형')),
                ('sublessor_type2', models.CharField(max_length=30, verbose_name='판매자정보')),
                ('latitude', models.DecimalField(decimal_places=30, max_digits=33, verbose_name='위도')),
                ('longitude', models.DecimalField(decimal_places=30, max_digits=33, verbose_name='경도')),
                ('room_desc', models.CharField(blank=True, max_length=300, null=True, verbose_name='방상세설명')),
                ('room_size', models.CharField(blank=True, max_length=10, null=True, verbose_name='면적')),
                ('is_duplex', models.BooleanField(default=False, verbose_name='복층여부')),
                ('window', models.CharField(blank=True, choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('7↑', '7↑')], max_length=300, null=True, verbose_name='창문수')),
                ('photo1', models.ImageField(blank=True, null=True, upload_to='%Y/%m/%d')),
                ('photo2', models.ImageField(blank=True, null=True, upload_to='%Y/%m/%d')),
                ('photo3', models.ImageField(blank=True, null=True, upload_to='%Y/%m/%d')),
                ('photo4', models.ImageField(blank=True, null=True, upload_to='%Y/%m/%d')),
                ('pano_photo', models.ImageField(blank=True, null=True, upload_to='%Y/%m/%d')),
                ('state', models.IntegerField(blank=True, default=0, null=True, verbose_name='거래 상태')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('like_user_set', models.ManyToManyField(blank=True, related_name='like_user_set', through='nanubang_app.Like', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('univ', models.CharField(choices=[('건국대학교 서울캠퍼스', '건국대학교 서울캠퍼스'), ('경희대학교 서울캠퍼스', '경희대학교 서울캠퍼스'), ('고려대학교 서울캠퍼스', '고려대학교 서울캠퍼스'), ('광운대학교', '광운대학교'), ('국민대학교', '국민대학교'), ('덕성여자대학교 쌍문캠퍼스', '덕성여자대학교 쌍문캠퍼스'), ('덕성여자대학교 종로캠퍼스', '덕성여자대학교 종로캠퍼스'), ('동국대학교 서울캠퍼스', '동국대학교 서울캠퍼스'), ('동덕여자대학교', '동덕여자대학교'), ('삼육대학교', '삼육대학교'), ('상명대학교 서울캠퍼스', '상명대학교 서울캠퍼스'), ('서강대학교', '서강대학교'), ('서경대학교', '서경대학교'), ('서울과학기술대학교', '서울과학기술대학교'), ('서울대학교 관악캠퍼스', '서울대학교 관악캠퍼스'), ('서울대학교 연건캠퍼스', '서울대학교 연건캠퍼스'), ('서울시립대학교', '서울시립대학교'), ('서울여자대학교', '서울여자대학교'), ('성공회대학교', '성공회대학교'), ('성균관대학교 인문사회캠퍼스', '성균관대학교 인문사회캠퍼스'), ('성신여자대학교 수정캠퍼스', '성신여자대학교 수정캠퍼스'), ('성신여자대학교 운정그린캠퍼스', '성신여자대학교 운정그린캠퍼스'), ('세종대학교', '세종대학교'), ('숙명여자대학교', '숙명여자대학교'), ('숭실대학교', '숭실대학교'), ('연세대학교 신촌캠퍼스', '연세대학교 신촌캠퍼스'), ('이화여자대학교', '이화여자대학교'), ('중앙대학교 서울캠퍼스', '중앙대학교 서울캠퍼스'), ('한국외국어대학교 서울캠퍼스', '한국외국어대학교 서울캠퍼스'), ('한국체육대학교', '한국체육대학교'), ('한국성서대학교', '한국성서대학교'), ('한성대학교', '한성대학교'), ('한양대학교 서울캠퍼스', '한양대학교 서울캠퍼스'), ('홍익대학교 서울캠퍼스', '홍익대학교 서울캠퍼스')], max_length=15, verbose_name='대학')),
                ('tag', models.CharField(max_length=10)),
                ('key', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nanubang_app.Room_infos')),
            ],
        ),
        migrations.AddField(
            model_name='like',
            name='room_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nanubang_app.Room_infos'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('author', 'room_info')},
        ),
    ]
